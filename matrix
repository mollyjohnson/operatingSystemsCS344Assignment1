#!/bin/bash

# Name: Molly Johnson
# ONID: johnsmol
# CS 344 Fall 2018
# Due: 10/8/18
# Assignment 1
# All information used to implement this script is adapted
# from the OSU CS 344 Fall 2018 lectures and assignment hints
# unless otherwise specifically indicated.

dims(){
# NAME
# dims - figure out dimensions of a given matrix
# SYNOPSOS
# calculate and print num of rows, a space, and then the num of columns of the matrix
# DESCRIPTION
# This is the dims function. This function will take a valid file as an argument or
# accept input from stdin. If the file is not readable or too many/few arguments
# are given, it will print an error message to stderr and return a value of 1. If
# the file or stdin input is valid, it will print the number of rows, a space, and
# then the number of columns to stdout and returns 0.

# use the tempInputDims variable to hold path to file with passed in matrix (doesn't
# matter if passed in from stdin or froma file). $$ added to end of temp file in order
# to prevent any duplicate names being used again mistakenly
tempInputDims="tempdims$$"
if [ "$#" = "1" ]
then
	cat > "$tempInputDims"
elif [ "$#" = "2" ]
then
	tempInputDims=$2
fi

# loop through each row and increment counter variable to get num of rows
rowCount=0
while read myLine
do
	rowCount=$(expr $rowCount + 1)
done < $tempInputDims

# -n added to prevent echo from printing newline
# adapted from: https://www.linuxquestions.org/questions/linux-newbie-8/bash-echo-followed-by-command-on-the-same-line-4175447966/
echo -n "$rowCount "

# head normally reads in first 10 lines of text from a file ($2). -1 added to make head
# only read in the first row. All tabs are then transformed into newlines, and the number
# of newlines counted (wc is word count, and the -l option makes it only give the line count). Hence
# the number of new lines counted + the original first line will equal the number of columns from the original file.
# adapted from: https://stackoverflow.com/questions/5761212/count-number-of-columns-in-bash/5761234
head -1 $tempInputDims | tr '\t' '\n' | wc -l

# check to see if the tempfile exists using -a. if it does exist, remove it. otherwise do nothing.
# This file checking is adapted from: 
# https://askubuntu.com/questions/558977/checking-for-a-file-and-whether-it-is-readable-and-writable/558990 
if [[ -a tempdims$$ ]]
then
	rm -f tempdims$$
fi
}

transpose(){
# NAME
# 
# SYNOPSOS
# 
# DESCRIPTION
# 
	echo "transpose function called"
}

mean(){
# NAME
# 
# SYNOPSOS
# 
# DESCRIPTION
# 
	echo "mean function called"	
}

add(){
# NAME
# 
# SYNOPSOS
# 
# DESCRIPTION
# 
	echo "add function called"
}

multiply(){
# NAME
# 
# SYNOPSOS
# 
# DESCRIPTION
# 
	echo "multiply function called"
}

# check for correct number of arguments (1 or 2 for dims, transpose, and mean since they can also take stdin, and 3 for
# add and multiply, since they must take in 2 files and can't use stdin). If there's an incorrect number of arguments,
# or if a file or files passed in is either unreadable or nonexistent, send error message to stderr and return 1 
# (a non-zero number), otherwise call the appropriate function. -s means to check if the file exists and is non-empty,
# and -r checks that the file is readable. This file checking is adapted from: 
# https://askubuntu.com/questions/558977/checking-for-a-file-and-whether-it-is-readable-and-writable/558990
if [ "$#" = "1" ]
then
	if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]     
	then
		$1 "${@:1}"
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
elif [ "$#" = "2" ]
then
	if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]     
	then
		if [[ -s $2 && -r $2 ]]
		then
			$1 "${@:1}"
		else
			echo "error: file does not exist or is not readble" 1>&2
			exit 1
		fi
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
elif [ "$#" = "3" ]
then
	if [ "$1" = "add" ] || [ "$1" = "multiply" ]  
	then
		if [[ -s $2 && -r $2 ]] && [[ -s $3 && -r $3 ]] 
		then
			$1 "${@:2}"
		else
			echo "error: file does not exist or is not readble" 1>&2
			exit 1
		fi
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
else
	echo "error: invalid number of arguments" 1>&2
	exit 1
fi
