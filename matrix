#!/bin/bash
# NOTE: my multiply function passed multiple runs with the grading script with
# plenty of time, and I have the screenshots if you need proof of this, but I'm
# still requesting that you put my results into a file just in case the time runs
# out as even though i feel i've optimized my function and kept to a minimal amount
# of looping and file i/o, when the server was extremely busy at one point on 10/8/18,
# the process was killed. So I think it should pass if not run when the server is
# experiencing extremely heavy use loads, but just in case am requesting that you
# pleae put my results in a file when grading. Thank you. If you need to see the
# screenshots of my testing with the grading script that showed all of the multiply
# function passed with full points please let me know. 

# Name: Molly Johnson
# ONID: johnsmol
# CS 344 Fall 2018
# Due: 10/8/18
# Assignment 1
# All information used to implement this script is adapted
# from the OSU CS 344 Fall 2018 lectures and assignment hints
# unless otherwise specifically indicated.

# trap command for the signals listed in the assignment instructions adapted from
# an OSU CS 344 Piazza post discussion. Signals are: INT is for interrupt, HUP is for hangup, and TERM is for terminate
trap "trapCommand" INT HUP TERM

trapCommand(){
rm -f *.tmp
}

dims(){
# NAME
# dims - figure out dimensions of a given matrix
# SYNOPSOS
# calculate and print num of rows, a space, and then the num of columns of the matrix
# DESCRIPTION
# This is the dims function. This function will take a valid file as an argument or
# accept input from stdin. If the file is not readable or too many/few arguments
# are given, it will print an error message to stderr and return a value of 1. If
# the file or stdin input is valid, it will print the number of rows, a space, and
# then the number of columns to stdout and returns 0 (0 is returned automatically).

# use the tempInputDims variable to hold path to file with passed in matrix (doesn't
# matter if passed in from stdin or froma file). $$ added to end of temp file in order
# to prevent any duplicate names being used again mistakenly
tempInputDims="tempdims$$.tmp"
if [ "$#" = "1" ]
then
	cat > "$tempInputDims"
elif [ "$#" = "2" ]
then
	tempInputDims=$2
fi

# use wc (word count) with the -l option to count the number of lines (i.e. rows) in the file.
# to prevent a newline from being output after this to stdout, use tr (transform) with the -d
# option and the newline character, as this will remove the newline character that would normally
# be sent to stdout after the line count is printed via wc -l.
# using wc -l to count lines (i.e. rows) in a file adapted from:
# https://stackoverflow.com/questions/3137094/how-to-count-lines-in-a-document and
# https://superuser.com/questions/249307/avoid-printing-line-breaks-in-shell-script
# this method will be used throughout this program.
cat $tempInputDims | wc -l | tr -d '\n'
echo -n " "

# head normally reads in first 10 lines of text from a file ($2). -1 added to make head
# only read in the first row. All tabs are then transformed into newlines, and the number
# of newlines counted (wc is word count, and the -l option makes it only give the line count). Hence
# the number of new lines counted + the original first line will equal the number of columns from the original file.
# adapted from: https://stackoverflow.com/questions/5761212/count-number-of-columns-in-bash/5761234
# this method will be used throughout this program.
head -1 $tempInputDims | tr '\t' '\n' | wc -l
}

transpose(){
# NAME
# transpose - reflect matrix elements along the diagonal 
# SYNOPSOS
# transpose matrix elements so that an MxN matrix becomes an NxM matrix, with the diagonal 
# elements remaining unchanged.
# DESCRIPTION
# This is the transpose function. This function will take a valid file as an argument
# or accept input from stdin. It will check that the num of args is correct and the file
# is readable. if has an error, will print error message to stderr and return 1. otherwise,
# will transpose the matrix provided and print this transposed matrix to stdout and return 0 automatically.

# use the tempInputTrans variable to hold path to file with passed in matrix (doesn't
# matter if passed in from stdin or froma file). $$ added to end of temp file in order
# to prevent any duplicate names being used again mistakenly
tempInputTrans="temptrans$$.tmp"
if [ "$#" = "1" ]
then
	cat > "$tempInputTrans"
elif [ "$#" = "2" ]
then
	tempInputTrans=$2
fi

# store the number of columns in the cols variable.
cols="$(head -1 $tempInputTrans | tr '\t' '\n' | wc -l)"

# alternate for loop format adapted from:
# https://www.cyberciti.biz/faq/bash-for-loop/
# using cut to take a column from the file and paste each column as a new line adapted from:
# https://www.thelinuxrain.com/articles/transposing-rows-and-columns-3-methods
# details about the cut and command and paste commands adapted from:
# https://www.mkssoftware.com/docs/man1/cut.1.asp and https://www.mkssoftware.com/docs/man1/paste.1.asp
# -fn where n is an integer tells cut to cut in field delimiter mode, cutting each column where n is the column number
# -s tells paste to concatenate all lines from each input file together on the single output line, in this
# case to put the values for each column from the file into a new row, hence transposing the elements in the file
# this method will be used throughout this program.
for (( i=1; i <= cols; i++ ))
do
	cut -f"$i" $tempInputTrans | paste -s
done
}

mean(){
# NAME
# mean - calculates the mean of each column
# SYNOPSOS
# find sum of each column and divide by num of rows to find the mean using the
# formula provided.
# DESCRIPTION
# This is the mean function. Will take a valid file arg or accept input from stdin. If
# valid (not too many/few args and file is readable if using a file), this function will
# find the sum of each column, then print this out into a 1xN row vector such that
# each element of the row vector is the mean of its corresponding column from the original file or stdin. 
# this will be printed to stdout. if there was an error, an error message
# will be printed to sderr, and will return a value of 1.

# use the tempInputTrans variable to hold path to file with passed in matrix (doesn't
# matter if passed in from stdin or froma file). $$ added to end of temp file in order
# to prevent any duplicate names being used again mistakenly
tempInputMean="tempmean$$.tmp"
if [ "$#" = "1" ]
then
	cat > "$tempInputMean"
elif [ "$#" = "2" ]
then
	tempInputMean=$2
fi

# store the number of columns in the columns variable.
columns="$(head -1 $tempInputMean | tr '\t' '\n' | wc -l)"

# create temp file and transpose
tempRowFile="temprow$$.tmp"
for (( h=1; h <= columns; h++ ))
do
	cut -f"$h" $tempInputMean | paste -s >> $tempRowFile
done

# calculate rows. while reading each line from the temp row file, take
# each element from that line. sum them. find the mean using the formula
# provided in the assignment instructions.
whileCount=1
tempFileRows="$(cat $tempRowFile | wc -l | tr -d '\n')"
origFileRows="$(cat $tempInputMean | wc -l | tr -d '\n')"
while read sumLine
do
	sum=0
	for num in $sumLine
	do
		(( sum = sum + num ))
	done

	# mean calculation obtained from assignment instructions
	mean=$(( ($sum + ($origFileRows/2)*( ($sum>0)*2-1 )) / $origFileRows ))

	if [ $whileCount -lt  $tempFileRows ]
	then
		echo -n -e "$mean\t"
	else
		echo "$mean"
	fi

	(( whileCount = whileCount + 1 ))
done < $tempRowFile
}

add(){
# NAME
# add - add two matrices element-wise
# SYNOPSOS
# adds two MxN matrices element-wise such that 
# DESCRIPTION
# This function is the add function. Will take in two valid matrices (must match in 
# dimensions). will then use transposing and parallel file input reading to sum
# corresponding elements from the two matrices (i.e. add row 1 column 1 from both
# matrices, and so on for the entire matrices) and then print the new matrix with
# the sum for each of these corresponding elements to stdout. If the matrix files are
# mismatched, will send error message to stderr and return 1. otherwise will return 0.

# set temp files to the two arguments passed in
leftAddInput="leftaddin$$.tmp"
rightAddInput="righdaddin$$.tmp"
leftAddInput=$1
rightAddInput=$2

# find the num of cols and rows for each matrix
leftColsAdd="$(head -1 $leftAddInput | tr '\t' '\n' | wc -l)"
leftRowsAdd="$(cat $leftAddInput | wc -l | tr -d '\n')"
rightColsAdd="$(head -1 $rightAddInput | tr '\t' '\n' | wc -l)"
rightRowsAdd="$(cat $rightAddInput | wc -l | tr -d '\n')"

# check that the two matrices entered match (same num cols and rows)
if [ $leftColsAdd -ne  $rightColsAdd ] || [ $leftRowsAdd -ne $rightRowsAdd ]
then
	echo "error: mismatched matrices entered" 1>&2
	exit 1
fi

# create loop counter and temp file
forLoopCount=1
tempAddFile="tempadd$$.tmp"

# read each line from each file. reading two files in simultaneously method adapted from
# method described by the instructor on the Piazza OSU CS 344 discussion board.
# use reading in the file lines for both file lines simultaneously and the for loop reading
# in line elements simultaneously to create one combined file such that each value that
# needs to be added to its accompanying value are adjacent.
while read leftMatrixLine <&3 && read rightMatrixLine <&4
do
	# get each element from each line simultaneously. if the count is less than the num of columns,
	# the variable needs to be printed with a trailing tab. if the count is equal to the num of cols,
	# then a newline should be printed after the variable
	# method for using a for loop to get two lines simultaneously from a file adapted from:
	# https://www.cyberciti.biz/faq/bash-for-loop/
	# add tabs to variables written to the file except the last one, then needs newline
	for num in $leftMatrixLine $rightMatrixLine
	do
		if [ $forLoopCount -lt $leftColsAdd ]
		then
			echo -n -e "$num\t" >> $tempAddFile
		elif [ $forLoopCount -eq $leftColsAdd ]
		then
			echo "$num" >> $tempAddFile
			forLoopCount=0
		fi
		(( forLoopCount = forLoopCount + 1 ))
	done
done 3<"$leftAddInput" 4<"$rightAddInput"

# get num of cols from the temp file and create a new temp file
tempAddCols="$(head -1 $tempAddFile | tr '\t' '\n' | wc -l)"
tempAddCut="tempaddcut$$.tmp"
tempOutputWithoutTransform="tempnotransform$$.tmp"

# transpose the tempAddFile
for (( k=1; k <= $tempAddCols ; k++ ))
do
	cut -f"$k" $tempAddFile | paste -s >> $tempAddCut
done

# create counter variables
addCounter=0
colPrintCount=1

# read in the transposed file and for each line, every two elements should
# be added together and then the sum written to the file in the same order
# as the elements were ORIGINALLY found in their files. use counter variables
# to make sure only every 2 elements are summed and that tabs are added after
# every new row element except the last one which gets a newline
while read myLine
do
	addSum=0
	for addNum in $myLine
	do
		if [ $addCounter -lt 2 ]
		then
			(( addSum = addSum + addNum ))
			(( addCounter = addCounter + 1 ))
		else
			
			(( addSum = addNum ))
			(( addCounter = 1 ))
		fi

		if [ $addCounter -eq 2 ]
		then
			if [ $colPrintCount -lt $leftRowsAdd ]
			then
				echo -e -n "$addSum\t" >> $tempOutputWithoutTransform
			else
				echo "$addSum" >> $tempOutputWithoutTransform 
			fi
			(( colPrintCount = colPrintCount + 1 ))
		fi
	done
	(( addCounter = 0 ))
	(( addSum = 0 ))
	(( colPrintCount = 1 ))
done < $tempAddCut

# create temp file and count the cols on the new temp file prior to transposing
tempOutputWithTransform="tempwtransform$$.tmp"
tempWithoutTransformCols="$(head -1 $tempOutputWithoutTransform | tr '\t' '\n' | wc -l)"

# transpose the file back into proper format using transpose method used before
for (( m=1; m <= $tempWithoutTransformCols; m++ ))
do
	cut -f"$m" $tempOutputWithoutTransform | paste -s >> $tempOutputWithTransform
done

# print file to stdout
cat $tempOutputWithTransform
}

multiply(){
# NAME
# multiply - use dot multiplication on two matrices
# SYNOPSOS
# multiply row elements from first matrix by column elements of second matrix (dot multiply)
# DESCRIPTION
# This is the multiply function. Will take each element from the first file's rows and
# multiply by the corresponding columns of the second file, such that row 1 column 2
# of file 1 would be multiplied by row 2 column 1 of the second file. Transposing the
# second file will be used to make the multiplication steps easier. The products will
# then be summed such that an MxN and NxP matrix will produce an MxP matrix and print
# this to stdout and return 0. If the matrices are not valid for dot multiplication, and
# error msg will be printed to stderr and the function will return 1.

# create temp files and calculate rows and cols
leftMultInput="leftmultin$$.tmp"
rightMultInput="righdmultin$$.tmp"
leftMultInput=$1
rightMultInput=$2
leftColsMult="$(head -1 $leftMultInput | tr '\t' '\n' | wc -l)"
leftRowsMult="$(cat $leftMultInput | wc -l | tr -d '\n')"
rightColsMult="$(head -1 $rightMultInput | tr '\t' '\n' | wc -l)"
rightRowsMult="$(cat $rightMultInput | wc -l | tr -d '\n')"

# check that num of columns of the first file match num of rows in second file 
if [ $leftColsMult -ne $rightRowsMult ]
then
	echo "error: mismatched matrices entered" 1>&2
	exit 1
fi

transposedRightInput="transrightinput$$.tmp"

# transpose second file so the files are in same row/col format for easier multiplication
for (( g=1; g <= $rightColsMult; g++ ))
do
	cut -f"$g" $rightMultInput | paste -s >> $transposedRightInput
done

# read in each line from first arg file, then read in each line from the 2nd
# arg transposed file. for each column, extract the element, multiply, and sum for the line,
# following the dot multiplication rules found at: https://www.mathsisfun.com/algebra/vectors-dot-product.html
# use variables to hold each line, adapted from:
# https://superuser.com/questions/121627/how-to-get-elements-from-list-in-bash
multSum=0
multResultsFile="multresults$$.tmp"
tempMult=0
counter=0
transposedCols="$(head -1 $transposedRightInput | tr '\t' '\n' | wc -l)"
while read leftMatrixLineMult
do
	leftLine="$leftMatrixLineMult"

	while read rightMatrixLineMult
	do
		rightLine="$rightMatrixLineMult"	
		for (( a=1; a <= $transposedCols; a++ ))
		do
			# -d for cut means to use DELIM instead of tab for field delimiter,
			# and -f means to select only these fields. so by incrementing a, will access all fields.
			# taking each element from a line adapted from:
			# https://superuser.com/questions/121627/how-to-get-elements-from-list-in-bash
			leftElement="$(echo $leftLine | cut -d" " -f"$a")"
			rightElement="$(echo $rightLine | cut -d" " -f"$a")"

			(( tempMult = leftElement * rightElement ))
			(( multSum = multSum + tempMult ))
			
		done
		(( counter = counter + 1 ))
		echo -e -n "$multSum" >> $multResultsFile
		if [ $counter -lt $rightColsMult ]
		then
			echo -n -e "\t" >> $multResultsFile
		else
			echo >> $multResultsFile
		fi
		(( multSum = 0 ))
	done < $transposedRightInput
	(( counter = 0 ))
done < $leftMultInput

cat $multResultsFile
}

# check for correct number of arguments (1 or 2 for dims, transpose, and mean since they can also take stdin, and 3 for
# add and multiply, since they must take in 2 files and can't use stdin). If there's an incorrect number of arguments,
# or if a file or files passed in is either unreadable or nonexistent, send error message to stderr and return 1 
# (a non-zero number), otherwise call the appropriate function and return 0 automatically. Note: -s means to check if 
# the file exists and is non-empty,  and -r checks that the file is readable. This file checking is adapted from: 
# https://askubuntu.com/questions/558977/checking-for-a-file-and-whether-it-is-readable-and-writable/558990
if [ "$#" = "1" ]
then
	if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]     
	then
		$1 "${@:1}"
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
elif [ "$#" = "2" ]
then
	if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ]     
	then
		if [[ -s $2 && -r $2 ]]
		then
			$1 "${@:1}"
		else
			echo "error: file does not exist or is not readable" 1>&2
			exit 1
		fi
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
elif [ "$#" = "3" ]
then
	if [ "$1" = "add" ] || [ "$1" = "multiply" ]  
	then
		if [[ -s $2 && -r $2 ]] && [[ -s $3 && -r $3 ]] 
		then
			$1 "${@:2}"
		else
			echo "error: file does not exist or is not readable" 1>&2
			exit 1
		fi
	else
		echo "error: invalid number of arguments" 1>&2
		exit 1
	fi
else
	echo "error: invalid number of arguments" 1>&2
	exit 1
fi

# idea to add .tmp to all files to make them easy to remove when script completes normally adapted
# from OSU CS 344 Piazza post/slack discussion
rm -f *.tmp
